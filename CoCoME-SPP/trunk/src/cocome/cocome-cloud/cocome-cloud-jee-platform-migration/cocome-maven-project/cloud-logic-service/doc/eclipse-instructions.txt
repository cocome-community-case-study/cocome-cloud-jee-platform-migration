---

Instructions to set up Eclipse environment

---

== Prerequisits ==

- Eclipse with Java EE support
- Glassfish 3.1 (or Glassfish 4.0)

Quick Facts:
${GLASSFISH} - path to the Glassfish installation
${HOME}      - home folder of your user account

== Preparations ==

1. Install Glassfish

This will usually create a domain named 'domain1'. We assume that you
installed Glassfish in a directory represented by the variable
${GLASSFISH}, which we use in the remaineder of this document to refer 
to the installation directory.

Note: in Unix/Linux path names use / and in Windows \. This may require
escaping in certain places, i.e., \\ for a \.

Glassfish is usually installed with the following layout:
${GLASSFISH}/bin
${GLASSFISH}/glassfish
${GLASSFISH}/javadb
${GLASSFISH}/mq
${GLASSFISH}/pkg
${GLASSFISH}/README.txt


2. Configure Glassfish Domains

We must create two Glassfish domains one for the web frontend and one
for the service logic.

The domain names are:
- cocome-logic
- cocome-web

2.1 Create domain using asadmin

Each domain requires their own port numbers for the service and
administration. The defaults are 8080 for the service and 4848 for the
administration interface. However, to avoid conflict with running
systems we define:
- cocome-logic: admin 4849, service 8181
- cocome-web:   admin 4850, service 8282

You may choose other port numbers, especially when on of these ports is
already in use. You may not be able to select port numbers below 32000,
as this can be prohibited by firewalls.

a) Change to ${GLASSFISH}/glassfish 
b) Execute bin/asadmin as follows. The tool will prompt for a password.
   You may leave that empty.

bin/asadmin create-domain --adminport 4849 --instanceport 8181 cocome-logic

bin/asadmin create-domain --adminport 4850 --instanceport 8282 cocome-web

Note: It is best to start each domain before creating the next when using 
this method. Otherwise both domains may end up using the same ports, for 
example for the jmx service, which will then cause a conflict if both 
domains are started on the same host.

2.2 Create domain using Eclipse

If you installed the Glassfish Tools from the Oracle Enterprise Pack 
for Eclipse you can create a new domain directly from within Eclipse. 
To do this, open the Servers view in Eclipse and add a new server with 
Right-Click -> New -> Server. In the wizard, select Glassfish in the 
version you use and enter cocome-logic or cocome-web as the server name.

In the next step of this wizard click on the "+" signs to the right of 
the domain path field. This opens a new dialogue. In the name field 
insert cocome-logic or cocome-web. The domain directory should already point 
to ${GLASSFISH}/domains and should not be modified. The portbase 
is used to compute the ports for this domain. Portbase + 80 is the 
port for accessing the application and portbase + 48 is the port where 
the admin console will be available. For this method we therefore define:

- cocome-logic: portbase 8100, admin 8148, service 8180
- cocome-web: portbase 8200, admin 8248, service 8280

In the remaining steps we will use the port numbers from Section 2.1.


3 Install the service adapter

The service adapter is a separate project and realizes the connection
to the data store for CoCoME. The required projects can be found in 
the following repository:

https://svnserver.informatik.kit.edu/i43/svn/code/CoCoME-SPP/trunk/src/cocome/cocome-cloud/cocome-cloud-jee-service-adapter

To deploy the service adapter, import the projects into Eclipse by
using the "Import from SVN" option provided by Eclipse and importing 
all projects under the root directory. Further installation instructions 
can then be found in service-adapter-ejb/res/Readme. We define the following 
settings for the service adapter:

- Domain name: cocome-data, admin 4851, service 8383


== Importing and Configuring of the CoCoME Build ==

1.  Import the existing maven project in Eclipse with 
    Import -> Maven -> Existing Maven Projects

2.  Select the cocome-maven-project folder in
    the SVN repository to import. There should appear two 
    sub-projects, cloud-logic-service and cloud-web-frontend.
    In the cloud-logic-service there are five child projects 
    (cloud-logic-ear, cloud-logic-ejb, cloud-logic-webservice,
    cloud-integrationtest and java-utils) to import.

4.  Copy the included settings.xml file for maven and copy it to 
    ${HOME}/.m2/settings.xml

4.1 Check and change the following setting:
    - local.glassfish.home to ${GLASSFISH}/glassfish where you replace
      ${GLASSFISH} with the path of the installation directory
    - local.glassfish.domain to cocome-logic
    - local.glassfish.httpPort to 8181
    - local.glassfish.adminPort to 4849

4.2 Change local.glassfish.passwordfile to point to a plain text password 
    file with the passwords in the following format. 
    Note that the master password has to be present and its default value 
    for a new Glassfish domain is changeit. The default user used is admin 
    and can be changed with the local.glassfish.user setting.
           
    AS_MASTER_PASSWORD=changeit
    AS_ADMIN_PASSWORD=admin
        
5.  Make sure to customize the settings regarding the deployment
    descriptors for glassfish and the logic service in the cloud-web-frontend/pom.xml.
        
    5.1 Change logic.host and logic.port to the host and port running
        the logic service, i.e., localhost and 8181 in our installation
        
    5.2 Change glassfish-web-domain, glassfish-web-user, 
        glassfish-web-passwordfile, glassfish-httpPort and 
        glassfish-adminPort to the values of the cocome-web domain.
        These settings will be used to deploy the web frontend to
        its domain.

6. Setup of the logic service integration test

This setup is optional. However, if we choose not to test the
service, we must disable its execution.

   a) Configure integration test

      The tests use settings in cloud-logic-integrationtest/pom.xml
      - wsdlLocationBaseURL: The URL to access the logic service, i.e. 
        the host and port where the logic service runs.
        
      - serviceAdapterDatabaseURL: The URL to access the database
        interface of the service adapter.
 
   TODO: This does not work -> Should be clearer with the new section under Preparations

   b) Disable integration test

      To disable running the integration tests simply comment out the 
      soapui plugin in the cloud-logic-integrationtest/pom.xml.

7. Setup of the EJBs

The logic service requires that the service adapter is running and
the needed information is read from the file Configuration.properties
in the folder cloud-logic-ejb/src/main/resources.

You only need to change the backendHost and backendPort properties
to point to the host and port of the service adapter. If the service 
adapter is running on localhost this would result in
- backendHost=localhost
- backendPort=8383


== Compile and Deploy CoCoME ==

Note: Compiling and deployment may fail due to Javadoc issues. In this
case rune mvn with the additional argument -Dmaven.javadoc.skip=true
which can be specified on command line like

mvn -Dmaven.javadoc.skip=true install

and in Eclipse by changing the maven built target setup.

Note: If compilation and deployment fail half through the build and
deployment process, there might be parts up and running which can cause
additional trouble after fixing the issue and trying installation again.
In this cas run mvn clean on command line or in Eclipse.

1. Deploy cloud-logic-service

To run the logic service select the cloud-logic-service project and
choose Run As -> Maven install. This will build the ear archive, start
the Glassfish domain if not started and deploy the service. This will
also run the integrationtest project which requires the service adapter
to be already running. 

Alternative command line approach:

cd cocome-maven-project/cloud-logic-service
mvn -Dmaven.javadoc.skip=true install


2. Deploy complete implementation

Either select the cocome-maven-project in Eclipse and execute maven
install or do this on command line as

cd cocome-maven-project
mvn -Dmaven.javadoc.skip=true install


== Undeploy Services ==

To undeploy and shut down Glassfish use Run As -> Maven clean.
If there were problems deploying a subproject, an error may occur
when trying to undeploy this subproject. The order in which the 
projects are deployed and undeployed is the same, so the error 
can normally be ignored. 

If you wish to undeploy a specific subproject you can also run the 
Maven clean command on this subproject only.

== Usage ==

Once you have successfully deployed the projects you can access the 
frontend under the following URL:

http://localhost:8180/cloud-web-frontend/

A login screen will appear where you can log in with one of 
the following credentials:

- User: admin, Password: admin
- User: cashier, Password: cashier
- User: enterprisemanager, Password: enterprise
- User: storemanager, Password: store
- User: stockmanager, Password: store

The credentials are hardcoded at this time but this will be 
changed in the future.

On first start it is recommended that you select Database Manager 
from the dropdown menu at the top and log in as admin. Now you 
can add enterprises, stores and products to the database by using 
the frontend.

You can also log in as a Cashier with the admin user or the 
cashier user to process sales through the web frontend. 
You need to provide the ID of an existing store to do that
which can be retrieved using the Database Manager view mentioned 
in the paragraph above.


== Additional information ==

- There may be errors regarding the target runtime. They may 
  be resolved by installing at least the Glassfish Tools from the  
  Oracle Enterprise Pack for Eclipse (OEPE) from the Eclipse 
  Marketplace. Then add a new Glassfish server in the Servers view
  with the Server root directory of your existing Glassfish installation.
  After this, change the Targeted Runtimes of the ear, ejb, webservice 
  and java-utils projects under Properties -> Targeted Runtimes to
  the newly created glassfish server.

- Add the JDK 7 path to your PATH environment variable if you have 
  problems with running glassfish through the maven install command.

- Disable the Build automatically option in Eclipse if you have trouble 
  deploying the cloud-web-frontend project or change the output folders
  for the Eclipse build to something other than /target. Eclipse 
  auto build may interfere with the maven build.
